[["getting-started-with-r-and-rstudio.html", "Week 3 Getting Started with R and RStudio Goals of this tutorial Audience Installing R and RStudio Preparation R and RStudio Basics Running commands from a script Getting started with R Working with tables Ending R sessions Going further Citation &amp; Session Info", " Week 3 Getting Started with R and RStudio This tutorial shows how to get started with R and it specifically focuses on R for analyzing language data but it offers valuable information for anyone who wants to get started with R. As such, this tutorial is aimed at fresh users or beginners with the aim of showcasing how to set up a R session in RStudio, how to set up R projects, and how to do basic operations using R. The aim is not to provide a fully-fledged from beginner-to-expert, all-you-need-to-know tutorial but rather to show how to properly and tidily set up a project before you start coding and exemplify common operations such as loading and manipulation tabular data and generating basic visualization using R. The entire R Notebook for the tutorial can be downloaded here. If you want to render the R Notebook on your machine, i.e. knitting the document to html or a pdf, you need to make sure that you have R and RStudio installed and you also need to download the bibliography file and store it in the same folder where you store the Rmd or the Rproj file. If you already have experience with R, both Wickham and Grolemund (2016) (see here) and Gillespie and Lovelace (2016) (see here) are highly recommendable and excellent resources for improving your coding abilities and workflows in R. Goals of this tutorial The goals of this tutorial are: How to get started with R How to orient yourself to R and RStudio How to create and work in R projects How to know where to look for help and to learn more about R Understand the basics of working with data: load data, save data, working with tables, create a simple plot Learn some best practices for using R scripts, using data, and projects Understand the basics of objects, functions, and indexing Audience The intended audience for this tutorial is beginner-level, with no previous experience using R. Thus, no prior knowledge of R is required. If you want to know more, would like to get some more practice, or would like to have another approach to R, please check out the workshops and resources on R provided by the UQ library. In addition, there are various online resources available to learn R (you can check out a very recommendable introduction here). Installing R and RStudio You have NOT yet installed R on your computer? You have a Windows computer? Then click here for downloading and installing R You have a Mac? Then click here for downloading and installing R You have NOT yet installed RStudio on your computer? Click here for downloading and installing RStudio. You have NOT yet downloaded the materials for this workshop? Click here to download the data for this session Click here to download the Rmd-file of this workshop You can find a more elaborate explanation of how to download and install R and RStudio here that was created by the UQ library. How to use the workshop materials You can follow this workshop in different ways based on your preferences as well as prior experience and knowledge of R (the suggestions listed below are ordered from less engaged/easy/no knowledge required to more engaged/more complex/more knowledge is required) You can simply sit back and follow the workshop You can load the Rmd-file in RStudio and execute the code snippets in this Rmd-file as we go (we will talk about what Rmd-file are, how they work, and how to work in RStudio below) If you decide on doing this, then I suggest, that you use a section of your screen for Zoom (to see what I do) and another section of your screen to work within your own R project (we will see what an R project is below) You can load the Rmd-file in RStudio, create a new Rmd-file (or R Notebook) and then copy and paste the code snippets in this new Rmd-file and execute them as we go. This option requires some knowledge of R and RStudio If you decide on doing this, then I suggest, that you use a section of your screen for Zoom (to see what I do) and another section of your screen to work within your own R project (as with the previous option) Future workshops will be interactive and allow you to write your own code into code boxes on the website - unfortunately, I was not able to integrate that for this workshop. Preparation Before you actually open R or RStudio, there things to consider that make working in R much easier and give your workflow a better structure. Imagine it like this: when you want to write a book, you could simply take pen and paper and start writing or you could think about what you want to write about, what different chapters your book would consist of, which chapters to write first, what these chapters will deal with, etc. The same is true for R: you could simply open R and start writing code or you can prepare you session and structure what you will be doing. Folder Structure and R projects Before actually starting with writing code, you should prepare the session by going through the following steps: 1. Create a folder for your project In that folder, create the following sub-folders (you can, of course, adapt this folder template to match your needs) data (you do not create this folder for the present workshop as you can simply use the data folder that you downloaded for this workshop instead) images tables docs The folder for your project could look like the the one shown below. Once you have created your project folder, you can go ahead with RStudio. 3. Open RStudio This is what RStudio looks like when you first open it: In RStudio, click on File You can use the drop-down menu to create a R project 4. R Projects In RStudio, click on New Project Next, confirm by clicking OK and select Existing Directory. Then, navigate to where you have just created the project folder for this workshop. Once you click on Open, you have created a new R project 5. R Notebooks In this project, click on File Click on New File and then on R Notebook as shown below. This R Notebook will be the file in which you do all your work. 6. Updating R In case you encounter issues when opening the R Notebook (e.g., if you receive an error message saying that you need to update packages which then do not install properly), you may have to update your R version. To update your current R version to the recent release please copy the code chunk shown below into the console pane (the bottom left pane) and click on Enter to run the code. The code will automatically update your version of R to the most recent release. During the update, you may be asked to specify some options - in that case, you can simply click on Accept and Next and accept the default settings. # install installr package install.packages(&quot;installr&quot;) # load installr package library(installr) # update r updateR() 7. Optimizing R project options When you work with projects, it is recommendable to control the so-called environment. This means that you make your R Project self-contained by storing all packages that are used in project in a library in the R Project (instead of in the general R library on your computer). Having a library in your R Project means that you can share your project folder wit other people and they will automatically have the same package versions that you have sued which makes your code more robust and reproducible. So, how to create such an environment? You simply click on Tools (at the very top right of RStudio), then click onProject Options then click on Environments and then check Use renv with this project. Now, when you install packages, they will be installed in the package library (rather than the general R library on your computer). 8. Getting started with R Notebooks You can now start writing in this R Notebook. For instance, you could start by changing the title of the R Notebook and describe what you are doing (what this Notebook contains). Below is a picture of what this document looked like when I started writing it. When you write in the R Notebook, you use what is called R Markdown which is explained below. R Markdown The Notebook is an R Markdown document: a Rmd (R Markdown) file is more than a flat text document: it’s a program that you can run in R and which allows you to combine prose and code, so readers can see the technical aspects of your work while reading about their interpretive significance. You can get a nice and short overview of the formatting options in R Markdown (Rmd) files here. R Markdown allows you to make your research fully transparent and reproducible! If a couple of years down the line another researcher or a journal editor asked you how you have done your analysis, you can simply send them the Notebook or even the entire R-project folder. As such, Rmd files are a type of document that allows to include snippets of code (and any outputs such as tables or graphs) in plain text while encoding the structure of your document by using simple typographical symbols to encode formatting (rather than HTML tags or format types such as Main header or Header level 1 in Word). Markdown is really quite simple to learn and these resources may help: The Markdown Wikipedia page includes a very handy chart of the syntax. John Gruber developed Markdown and his introduction to the syntax is worth browsing. This interactive Markdown tutorial will teach you the syntax in a few minutes. R and RStudio Basics RStudio is a so-called IDE - Integrated Development Environment. The interface provides easy access to R. The advantage of this application is that R programs and files as well as a project directory can be managed easily. The environment is capable of editing and running program code, viewing outputs and rendering graphics. Furthermore, it is possible to view variables and data objects of an R-script directly in the interface. RStudio: Panes The GUI - Graphical User Interface - that RStudio provides divides the screen into four areas that are called panes: File editor Environment variables R console Management panes (File browser, plots, help display and R packages). The two most important are the R console (bottom left) and the File editor (or Script in the top left). The Environment variables and Management panes are on the right of the screen and they contain: Environment (top): Lists all currently defined objects and data sets History (top): Lists all commands recently used or associated with a project Plots (bottom): Graphical output goes here Help (bottom): Find help for R packages and functions. Don’t forget you can type ? before a function name in the console to get info in the Help section. Files (bottom): Shows the files available to you in your working directory These RStudio panes are shown below. R Console (bottom left pane) The console pane allows you to quickly and immediately execute R code. You can experiment with functions here, or quickly print data for viewing. Type next to the &gt; and press Enter to execute. EXERCISE TIME! ` You can use R like a calculator. Try typing 2+8 into the R console. Answer 2+8 ## [1] 10 ` Here, the plus sign is the operator. Operators are symbols that represent some sort of action. However, R is, of course, much more than a simple calculator. To use R more fully, we need to understand objects, functions, and indexing - which we will learn about as we go. For now, think of objects as nouns and functions as verbs. Running commands from a script To run code from a script, insert your cursor on a line with a command, and press CTRL/CMD+Enter. Or highlight some code to only run certain sections of the command, then press CTRL/CMD+Enter to run. Alternatively, use the Run button at the top of the pane to execute the current line or selection (see below). Script Editor (top left pane) In contrast to the R console, which quickly runs code, the Script Editor (in the top left) does not automatically execute code. The Script Editor allows you to save the code essential to your analysis. You can re-use that code in the moment, refer back to it later, or publish it for replication. Now, that we have explored RStudio, we are ready to get started with R! Getting started with R This section introduces some basic concepts and procedures that help optimize your workflow in R. Setting up an R session At the beginning of a session, it is common practice to define some basic parameters. This is not required or even necessary, but it may just help further down the line. This session preparation may include specifying options. In the present case, we want R to show numbers as numbers up to 100 decimal points (and not show them in mathematical notation (in mathematical notation, 0.007 would be represented as 0.7e-3)) want R to show maximally 100 results (otherwise, it can happen that R prints out pages-after-pages of some numbers). Again, the session preparation is not required or necessary but it can help avoid errors. # set options options(stringsAsFactors = F) options(scipen = 100) options(max.print=100) In script editor pane of RStudio, this would look like this: Packages When using R, most of the functions are not loaded or even installing automatically. Instead, most functions are in contained in what are called packages. R comes with about 30 packages (“base R”). There are over 10,000 user-contributed packages; you can discover these packages online. A prevalent collection of packages is the Tidyverse, which includes ggplot2, a package for making graphics. Before being able to use a package, we need to install the package (using the install.packages function) and load the package (using the library function). However, a package only needs to be installed once(!) and can then simply be loaded. When you install a package, this will likely install several other packages it depends on. You should have already installed tidyverse before the workshop. You must load the package in any new R session where you want to use that package. Below I show what you need to type when you want to install the tidyverse, the tidytext, the quanteda, the readxl, and the tm packages (which are the packages that we will need in this workshop). install.packages(&quot;tidyverse&quot;) install.packages(&quot;tidytext&quot;) install.packages(&quot;quanteda&quot;) install.packages(&quot;readxl&quot;) install.packages(&quot;tm&quot;) install.packages(&quot;tokenizers&quot;) install.packages(&quot;here&quot;) install.packages(&quot;flextable&quot;) # install klippy for copy-to-clipboard button in code chunks install.packages(&quot;remotes&quot;) remotes::install_github(&quot;rlesur/klippy&quot;) To load these packages, use the library function which takes the package name as its main argument. library(tidyverse) library(tidytext) library(quanteda) library(readxl) library(tm) library(tokenizers) library(here) library(flextable) # activate klippy for copy-to-clipboard button klippy::klippy() The session preparation section of your Rmd file will thus also state which packages a script relies on. In script editor pane of RStudio, the code blocks that install and activate packages would look like this: Getting help When working with R, you will encounter issues and face challenges. A very good thing about R is that it provides various ways to get help or find information about the issues you face. Finding help within R To get help regrading what functions a package contains, which arguments a function takes or to get information about how to use a function, you can use the help function or the apropos. function or you can simply type a ? before the package or two ?? if this does not give you any answers. help(tidyverse) apropos(&quot;tidyverse&quot;) ?require There are also other “official” help resources from R/RStudio. Read official package documentation, see vignettes, e.g., Tidyverse https://cran.r-project.org/package=tidyverse Use the RStudio Cheat Sheets at https://www.rstudio.com/resources/cheatsheets/ Use the RStudio Help viewer by typing ? before a function or package Check out the keyboard shortcuts Help under Tools in RStudio for some good tips Finding help online One great thing about R is that you can very often find an answer to your question online. Google your error! See http://r4ds.had.co.nz/introduction.html#getting-help-and-learning-more for excellent suggestions on how to find help for a specific question online. Working with tables We will now start working with data in R. As most of the data that we work with comes in tables, we will focus on this first before moving on to working with text data. Loading data from the web To show, how data can be downloaded from the web, we will download a tab-separated txt-file. Translated to prose, the code below means Create an object called icebio and in that object, store the result of the read.delim function. read.delim stands for read delimited file and it takes the URL from which to load the data (or the path to the data on your computer) as its first argument. The sep stand for separator and the \\t stands for tab-separated and represents the second argument that the read.delim function takes. The third argument, header, can take either T(RUE) or F(ALSE) and it tells R if the data has column names (headers) or not. Functions and Objects In R, functions always have the following form: function(argument1, argument2, ..., argumentN). Typically a function does something to an object (e.g. a table), so that the first argument typically specifies the data to which the function is applied. Other arguments then allow to add some information. Just as a side note, functions are also objects that do not contain data but instructions. To assign content to an object, we use &lt;- or = so that the we provide a name for an object, and then assign some content to it. For example, MyObject &lt;- 1:3 means Create an object called MyObject. this object should contain the numbers 1 to 3. # load data icebio &lt;- read.delim(&quot;https://slcladal.github.io/data/BiodataIceIreland.txt&quot;, sep = &quot;\\t&quot;, header = T) Inspecting data There are many ways to inspect data. We will briefly go over the most common ways to inspect data. The head function takes the data-object as its first argument and automatically shows the first 6 elements of an object (or rows if the data-object has a table format). head(icebio) ## id file.speaker.id text.id spk.ref zone date sex age ## 1 1 &lt;S1A-001$A&gt; S1A-001 A northern ireland 1990-1994 male 34-41 ## 2 2 &lt;S1A-001$B&gt; S1A-001 B northern ireland 1990-1994 female 34-41 ## 3 3 &lt;S1A-002$?&gt; S1A-002 ? &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 4 4 &lt;S1A-002$A&gt; S1A-002 A northern ireland 2002-2005 female 26-33 ## 5 5 &lt;S1A-002$B&gt; S1A-002 B northern ireland 2002-2005 female 19-25 ## 6 6 &lt;S1A-002$C&gt; S1A-002 C northern ireland 2002-2005 male 50+ ## word.count ## 1 765 ## 2 1298 ## 3 23 ## 4 391 ## 5 47 ## 6 200 We can also use the head function to inspect more or less elements and we can specify the number of elements (or rows) that we want to inspect as a second argument. In the example below, the 4 tells R that we only want to see the first 4 rows of the data. head(icebio, 4) ## id file.speaker.id text.id spk.ref zone date sex age ## 1 1 &lt;S1A-001$A&gt; S1A-001 A northern ireland 1990-1994 male 34-41 ## 2 2 &lt;S1A-001$B&gt; S1A-001 B northern ireland 1990-1994 female 34-41 ## 3 3 &lt;S1A-002$?&gt; S1A-002 ? &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 4 4 &lt;S1A-002$A&gt; S1A-002 A northern ireland 2002-2005 female 26-33 ## word.count ## 1 765 ## 2 1298 ## 3 23 ## 4 391 EXERCISE TIME! ` Download and inspect the first 7 rows of the data set that you can find under this URL: https://slcladal.github.io/data/lmmdata.txt. Can you guess what the data is about? Answer ex1data &lt;- read.delim(&quot;https://slcladal.github.io/data/lmmdata.txt&quot;, sep = &quot;\\t&quot;) head(ex1data, 7) ## Date Genre Text Prepositions Region ## 1 1736 Science albin 166.01 North ## 2 1711 Education anon 139.86 North ## 3 1808 PrivateLetter austen 130.78 North ## 4 1878 Education bain 151.29 North ## 5 1743 Education barclay 145.72 North ## 6 1908 Education benson 120.77 North ## 7 1906 Diary benson 119.17 North The data is about texts and the different columns provide information about the texts such as when the texts were written (Date), the genre the texts represent (Genre), the name of the texts (Text), the relative frequencies of prepositions the texts contain (Prepositions), and the region where the author was from (Region). ` Accessing individual cells in a table If you want to access specific cells in a table, you can do so by typing the name of the object and then specify the rows and columns in square brackets (i.e. data[row, column]). For example, icebio[2, 4] would show the value of the cell in the second row and fourth column of the object icebio. We can also use the colon to define a range (as shown below, where 1:5 means from 1 to 5 and 1:3 means from 1 to 3) The command icebio[1:5, 1:3] thus means: Show me the first 5 rows and the first 3 columns of the data-object that is called icebio. icebio[1:5, 1:3] ## id file.speaker.id text.id ## 1 1 &lt;S1A-001$A&gt; S1A-001 ## 2 2 &lt;S1A-001$B&gt; S1A-001 ## 3 3 &lt;S1A-002$?&gt; S1A-002 ## 4 4 &lt;S1A-002$A&gt; S1A-002 ## 5 5 &lt;S1A-002$B&gt; S1A-002 EXERCISE TIME! ` How would you inspect the content of the cells in 4th column, rows 3 to 5 of the icebio data set? Answer icebio[3:5, 4] ## [1] &quot;?&quot; &quot;A&quot; &quot;B&quot; ` Inspecting the structure of data You can use the str function to inspect the structure of a data set. This means that this function will show the number of observations (rows) and variables (columns) and tell you what type of variables the data consists of int = integer chr = character string num = numeric fct = factor str(icebio) ## &#39;data.frame&#39;: 1332 obs. of 9 variables: ## $ id : int 1 2 3 4 5 6 7 8 9 10 ... ## $ file.speaker.id: chr &quot;&lt;S1A-001$A&gt;&quot; &quot;&lt;S1A-001$B&gt;&quot; &quot;&lt;S1A-002$?&gt;&quot; &quot;&lt;S1A-002$A&gt;&quot; ... ## $ text.id : chr &quot;S1A-001&quot; &quot;S1A-001&quot; &quot;S1A-002&quot; &quot;S1A-002&quot; ... ## $ spk.ref : chr &quot;A&quot; &quot;B&quot; &quot;?&quot; &quot;A&quot; ... ## $ zone : chr &quot;northern ireland&quot; &quot;northern ireland&quot; NA &quot;northern ireland&quot; ... ## $ date : chr &quot;1990-1994&quot; &quot;1990-1994&quot; NA &quot;2002-2005&quot; ... ## $ sex : chr &quot;male&quot; &quot;female&quot; NA &quot;female&quot; ... ## $ age : chr &quot;34-41&quot; &quot;34-41&quot; NA &quot;26-33&quot; ... ## $ word.count : int 765 1298 23 391 47 200 464 639 308 78 ... The summary function summarizes the data. summary(icebio) ## id file.speaker.id text.id spk.ref ## Min. : 1.0 Length:1332 Length:1332 Length:1332 ## 1st Qu.: 333.8 Class :character Class :character Class :character ## Median : 666.5 Mode :character Mode :character Mode :character ## Mean : 666.5 ## 3rd Qu.: 999.2 ## Max. :1332.0 ## zone date sex age ## Length:1332 Length:1332 Length:1332 Length:1332 ## Class :character Class :character Class :character Class :character ## Mode :character Mode :character Mode :character Mode :character ## ## ## ## word.count ## Min. : 0.0 ## 1st Qu.: 66.0 ## Median : 240.5 ## Mean : 449.9 ## 3rd Qu.: 638.2 ## Max. :2565.0 Tabulating data We can use the table function to create basic tables that extract raw frequency information. The following command tells us how many instances there are of each level of the variable date in the icebio. TIP ` In order to access specific columns of a data frame, you can first type the name of the data set followed by a $ symbol and then the name of the column (or variable). ` table(icebio$date) ## ## 1990-1994 1995-2001 2002-2005 ## 905 67 270 Alternatively, you could, of course, index the column by using its position in the data set like this: icebio[, 6] - the result of table(icebio[, 6]) and table(icebio$date) are the same! Also note that here we leave out indexes for rows to tell R that we want all rows. When you want to cross-tabulate columns, it is often better to use the ftable function (ftable stands for frequency table). ftable(icebio$age, icebio$sex) ## female male ## ## 0-18 5 7 ## 19-25 163 65 ## 26-33 83 36 ## 34-41 35 58 ## 42-49 35 97 ## 50+ 63 138 EXERCISE TIME! ` Using the table function, how many women are in the data collected between 2002 and 2005? Answer table(icebio$date, icebio$sex) ## ## female male ## 1990-1994 338 562 ## 1995-2001 4 58 ## 2002-2005 186 84 Using the ftable function, how many men are are from northern Ireland in the data collected between 1990 and 1994? Answer ftable(icebio$date, icebio$zone, icebio$sex) ## female male ## ## 1990-1994 mixed between ni and roi 18 13 ## non-corpus speaker 7 22 ## northern ireland 104 289 ## republic of ireland 209 238 ## 1995-2001 mixed between ni and roi 0 0 ## non-corpus speaker 1 1 ## northern ireland 2 36 ## republic of ireland 1 21 ## 2002-2005 mixed between ni and roi 19 7 ## non-corpus speaker 7 9 ## northern ireland 122 41 ## republic of ireland 38 27 ` Saving data to your computer To save tabular data on your computer, you can use the write.table function. This function requires the data that you want to save as its first argument, the location where you want to save the data as the second argument and the type of delimiter as the third argument. write.table(icebio, here::here(&quot;data&quot;, &quot;icebio.txt&quot;), sep = &quot;\\t&quot;) A word about paths In the code chunk above, the sequence here::here(\"data\", \"icebio.txt\") is a handy way to define a path. A path is simply the location where a file is stored on your computer or on the internet (which typically is a server - which is just a fancy term for a computer - somewhere on the globe). The here function from thehere package allows to simply state in which folder a certain file is and what file you are talking about. In this case, we want to access the file icebio (which is a txt file and thus has the appendix .txt) in the data folder. R will always start looking in the folder in which your project is stored. If you want to access a file that is stored somewhere else on your computer, you can also define the full path to the folder in which the file is. In my case, this would be D:/Uni/UQ/SLC/LADAL/SLCLADAL.github.io/data. However, as the data folder in in the folder where my Rproj file is, I only need to specify that the file is in the data folder within the folder in which my Rproj file is located. A word about package naming Another thing that is notable in the sequence here::here(\"data\", \"icebio.txt\") is that I specified that the here function is part of the here package. This is what I meant by writing here::here which simply means use the here function from here package (package::function). This may appear to be somewhat redundant but it happens quite frequently, that different packages have functions that have the same names. In such cases, R will simply choose the function from the package that was loaded last. To prevent R from using the wrong function, it makes sense to specify the package AND the function (as I did in the sequence here::here). I only use functions without specify the package if the function is part of base R. Loading data from your computer To load tabular data from within your project folder (if it is in a tab-separated txt-file) you can also use the read.delim function. The only difference to loading from the web is that you use a path instead of a URL. If the txt-file is in the folder called data in your project folder, you would load the data as shown below. icebio &lt;- read.delim(here::here(&quot;data&quot;, &quot;icebio.txt&quot;), sep = &quot;\\t&quot;, header = T) However, you can always just use the full path (and you must do this is the data is not in your project folder). NOTEYou may have to change the path to the data! icebio &lt;- read.delim(here::here(&quot;data&quot;, &quot;icebio.txt&quot;), sep = &quot;\\t&quot;, header = T) To if this has worked, we will use the head function to see first 6 rows of the data head(icebio) ## id file.speaker.id text.id spk.ref zone date sex age ## 1 1 &lt;S1A-001$A&gt; S1A-001 A northern ireland 1990-1994 male 34-41 ## 2 2 &lt;S1A-001$B&gt; S1A-001 B northern ireland 1990-1994 female 34-41 ## 3 3 &lt;S1A-002$?&gt; S1A-002 ? &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 4 4 &lt;S1A-002$A&gt; S1A-002 A northern ireland 2002-2005 female 26-33 ## 5 5 &lt;S1A-002$B&gt; S1A-002 B northern ireland 2002-2005 female 19-25 ## 6 6 &lt;S1A-002$C&gt; S1A-002 C northern ireland 2002-2005 male 50+ ## word.count ## 1 765 ## 2 1298 ## 3 23 ## 4 391 ## 5 47 ## 6 200 Loading Excel data To load Excel spreadsheets, you can use the read_excel function from the readxl package as shown below. However, it may be necessary to install and activate the readxl package first. icebio &lt;- readxl::read_excel(here::here(&quot;data&quot;, &quot;ICEdata.xlsx&quot;)) We now briefly check column names to see if the loading of the data has worked. colnames(icebio) ## [1] &quot;id&quot; &quot;file.speaker.id&quot; &quot;text.id&quot; &quot;spk.ref&quot; ## [5] &quot;zone&quot; &quot;date&quot; &quot;sex&quot; &quot;age&quot; ## [9] &quot;word.count&quot; Loading text data There are many functions that we can use to load text data into R. For example, we can use the readLines function as shown below. text &lt;- readLines(here::here(&quot;data&quot;, &quot;text2.txt&quot;)) # inspect first text element text[1] ## [1] &quot;The book is presented as a manuscript written by its protagonist, a middle-aged man named Harry Haller, who leaves it to a chance acquaintance, the nephew of his landlady. The acquaintance adds a short preface of his own and then has the manuscript published. The title of this \\&quot;real\\&quot; book-in-the-book is Harry Haller&#39;s Records (For Madmen Only).&quot; To load many texts, we can use a loop to read all texts in a folder as shown below. In a first step, we define the paths of the texts and then, we use the sapply function to loop over the paths and read them into R. # define paths paths &lt;- list.files(here::here(&quot;data/testcorpus&quot;), full.names = T) # load texts texts &lt;- sapply(paths, function(x){ readLines(x) }) # inspect first text element texts[1] ## $&lt;NA&gt; ## NULL A method achieving the same result which uses piping (more on what that is below) and tidyverse R code is shown below. # define paths texts &lt;- list.files(here::here(&quot;data/testcorpus&quot;), full.names = T, pattern = &quot;.*txt&quot;) %&gt;% purrr::map_chr(~ readr::read_file(.)) # inspect first text element texts[1] ## [1] NA Renaming, Piping, and Filtering To rename existing columns in a table, you can use the rename command which takes the table as the first argument, the new name as the second argument, the an equal sign (=), and finally, the old name es the third argument. For example, renaming a column OldName as NewName in a table called MyTable would look like this: rename(MyTable, NewName = OldName). Piping is done using the %&gt;% sequence and it can be translated as and then. In the example below, we create a new object (icebio_edit) from the existing object (icebio) and then we rename the columns in the new object. When we use piping, we do not need to name the data we are using as this is provided by the previous step. icebio_edit &lt;- icebio %&gt;% dplyr::rename(Id = id, FileSpeakerId = file.speaker.id, File = colnames(icebio)[3], Speaker = colnames(icebio)[4]) # inspect data icebio_edit[1:5, 1:6] ## # A tibble: 5 × 6 ## Id FileSpeakerId File Speaker zone date ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 &lt;S1A-001$A&gt; S1A-001 A northern ireland 1990-1994 ## 2 2 &lt;S1A-001$B&gt; S1A-001 B northern ireland 1990-1994 ## 3 3 &lt;S1A-002$?&gt; S1A-002 ? NA NA ## 4 4 &lt;S1A-002$A&gt; S1A-002 A northern ireland 2002-2005 ## 5 5 &lt;S1A-002$B&gt; S1A-002 B northern ireland 2002-2005 A very handy way to rename many columns simultaneously, you can use the str_to_title function which capitalizes first letter of a word. In the example below, we capitalize all first letters of the column names of our current data. colnames(icebio_edit) &lt;- stringr::str_to_title(colnames(icebio_edit)) # inspect data icebio_edit[1:5, 1:6] ## # A tibble: 5 × 6 ## Id Filespeakerid File Speaker Zone Date ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 &lt;S1A-001$A&gt; S1A-001 A northern ireland 1990-1994 ## 2 2 &lt;S1A-001$B&gt; S1A-001 B northern ireland 1990-1994 ## 3 3 &lt;S1A-002$?&gt; S1A-002 ? NA NA ## 4 4 &lt;S1A-002$A&gt; S1A-002 A northern ireland 2002-2005 ## 5 5 &lt;S1A-002$B&gt; S1A-002 B northern ireland 2002-2005 To remove rows based on values in columns you can use the filter function. icebio_edit2 &lt;- icebio_edit %&gt;% dplyr::filter(Speaker != &quot;?&quot;, Zone != is.na(Zone), Date == &quot;2002-2005&quot;, Word.count &gt; 5) # inspect data head(icebio_edit2) ## # A tibble: 6 × 9 ## Id Filespeakerid File Speaker Zone Date Sex Age Word.count ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 4 &lt;S1A-002$A&gt; S1A-002 A northern ire… 2002… fema… 26-33 391 ## 2 5 &lt;S1A-002$B&gt; S1A-002 B northern ire… 2002… fema… 19-25 47 ## 3 6 &lt;S1A-002$C&gt; S1A-002 C northern ire… 2002… male 50+ 200 ## 4 7 &lt;S1A-002$D&gt; S1A-002 D northern ire… 2002… fema… 50+ 464 ## 5 8 &lt;S1A-002$E&gt; S1A-002 E mixed betwee… 2002… male 34-41 639 ## 6 9 &lt;S1A-002$F&gt; S1A-002 F northern ire… 2002… fema… 26-33 308 To select specific columns you can use the select function. icebio_selection &lt;- icebio_edit2 %&gt;% dplyr::select(File, Speaker, Word.count) # inspect data head(icebio_selection) ## # A tibble: 6 × 3 ## File Speaker Word.count ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 S1A-002 A 391 ## 2 S1A-002 B 47 ## 3 S1A-002 C 200 ## 4 S1A-002 D 464 ## 5 S1A-002 E 639 ## 6 S1A-002 F 308 You can also use the select function to remove specific columns. icebio_selection2 &lt;- icebio_edit2 %&gt;% dplyr::select(-Id, -File, -Speaker, -Date, -Zone, -Age) # inspect data head(icebio_selection2) ## # A tibble: 6 × 3 ## Filespeakerid Sex Word.count ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 &lt;S1A-002$A&gt; female 391 ## 2 &lt;S1A-002$B&gt; female 47 ## 3 &lt;S1A-002$C&gt; male 200 ## 4 &lt;S1A-002$D&gt; female 464 ## 5 &lt;S1A-002$E&gt; male 639 ## 6 &lt;S1A-002$F&gt; female 308 Ordering data To order data, for instance, in ascending order according to a specific column you can use the arrange function. icebio_ordered_asc &lt;- icebio_selection2 %&gt;% dplyr::arrange(Word.count) # inspect data head(icebio_ordered_asc) ## # A tibble: 6 × 3 ## Filespeakerid Sex Word.count ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 &lt;S1B-009$D&gt; female 6 ## 2 &lt;S1B-005$C&gt; female 7 ## 3 &lt;S1B-009$C&gt; male 7 ## 4 &lt;S1B-020$F&gt; male 7 ## 5 &lt;S1B-006$G&gt; female 9 ## 6 &lt;S2A-050$B&gt; male 9 To order data in descending order you can also use the arrange function and simply add a - before the column according to which you want to order the data. icebio_ordered_desc &lt;- icebio_selection2 %&gt;% dplyr::arrange(-Word.count) # inspect data head(icebio_ordered_desc) ## # A tibble: 6 × 3 ## Filespeakerid Sex Word.count ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 &lt;S2A-055$A&gt; female 2355 ## 2 &lt;S2A-047$A&gt; male 2340 ## 3 &lt;S2A-035$A&gt; female 2244 ## 4 &lt;S2A-048$A&gt; male 2200 ## 5 &lt;S2A-015$A&gt; male 2172 ## 6 &lt;S2A-054$A&gt; female 2113 The output shows that the female speaker in file S2A-005 with the speaker identity A has the highest word count with 2,355 words. EXERCISE TIME! ` Using the data called icebio, create a new data set called ICE_Ire_ordered and arrange the data in descending order by the number of words that each speaker has uttered. Who is the speaker with the highest word count? Answer ICE_Ire_ordered &lt;- icebio %&gt;% dplyr::arrange(-word.count) # inspect data head(ICE_Ire_ordered) ## # A tibble: 6 × 9 ## id file.speaker.id text.id spk.ref zone date sex age word.count ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 956 &lt;S2A-037$A&gt; S2A-037 A republic o… 1990… male NA 2565 ## 2 919 &lt;S2A-016$A&gt; S2A-016 A republic o… 1995… fema… 34-41 2482 ## 3 933 &lt;S2A-023$A&gt; S2A-023 A northern i… 1990… male 50+ 2367 ## 4 992 &lt;S2A-055$A&gt; S2A-055 A northern i… 2002… fema… 42-49 2355 ## 5 979 &lt;S2A-047$A&gt; S2A-047 A republic o… 2002… male 50+ 2340 ## 6 997 &lt;S2A-059$A&gt; S2A-059 A republic o… 1990… fema… NA 2305 ` Creating and changing variables New columns are created, and existing columns can be changed, by using the mutate function. The mutate function takes two arguments (if the data does not have to be specified): the first argument is the (new) name of column that you want to create and the second is what you want to store in that column. The = tells R that the new column will contain the result of the second argument. In the example below, we create a new column called Texttype. This new column should contain the value PrivateDialoge if Filespeakerid contains the sequence S1A, the value PublicDialogue if Filespeakerid contains the sequence S1B, the value UnscriptedMonologue if Filespeakerid contains the sequence S2A, the value ScriptedMonologue if Filespeakerid contains the sequence S2B, the value of Filespeakerid if Filespeakerid neither contains S1A, S1B, S2A, nor S2B. icebio_texttype &lt;- icebio_selection2 %&gt;% dplyr::mutate(Texttype = dplyr::case_when(stringr::str_detect(Filespeakerid ,&quot;S1A&quot;) ~ &quot;PrivateDialoge&quot;, stringr::str_detect(Filespeakerid ,&quot;S1B&quot;) ~ &quot;PublicDialogue&quot;, stringr::str_detect(Filespeakerid ,&quot;S2A&quot;) ~ &quot;UnscriptedMonologue&quot;, stringr::str_detect(Filespeakerid ,&quot;S2B&quot;) ~ &quot;ScriptedMonologue&quot;, TRUE ~ Filespeakerid)) # inspect data head(icebio_texttype) ## # A tibble: 6 × 4 ## Filespeakerid Sex Word.count Texttype ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 &lt;S1A-002$A&gt; female 391 PrivateDialoge ## 2 &lt;S1A-002$B&gt; female 47 PrivateDialoge ## 3 &lt;S1A-002$C&gt; male 200 PrivateDialoge ## 4 &lt;S1A-002$D&gt; female 464 PrivateDialoge ## 5 &lt;S1A-002$E&gt; male 639 PrivateDialoge ## 6 &lt;S1A-002$F&gt; female 308 PrivateDialoge If-statements We should briefly talk about if-statements (or case_when in the present case). The case_when function is both very powerful and extremely helpful as it allows you to assign values based on a test. As such, case_when-statements can be read as: When/If X is the case, then do A and if X is not the case do B! (When/If -&gt; Then -&gt; Else) The nice thing about ifelse or case_when-statements is that they can be used in succession as we have done above. This can then be read as: If X is the case, then do A, if Y is the case, then do B, else do Z EXERCISE TIME! ` 1.Using the data called icebio, create a new data set called ICE_Ire_AgeGroup in which you create a column called AgeGroup where all speakers who are younger than 42 have the value young and all speakers aged 42 and over old. Tip: use if-statements to assign the old and young values. Answer ICE_Ire_AgeGroup &lt;- icebio %&gt;% dplyr::mutate(AgeGroup = dplyr::case_when(age == &quot;42-49&quot; ~ &quot;old&quot;, age == &quot;50+&quot; ~ &quot;old&quot;, age == &quot;0-18&quot; ~ &quot;young&quot;, age == &quot;19-25&quot; ~ &quot;young&quot;, age == &quot;26-33&quot; ~ &quot;young&quot;, age == &quot;34-41&quot; ~ &quot;young&quot;, TRUE ~age)) # inspect data head(ICE_Ire_AgeGroup); table(ICE_Ire_AgeGroup$AgeGroup) ## # A tibble: 6 × 10 ## id file.speaker.id text.id spk.ref zone date sex age word.count ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 &lt;S1A-001$A&gt; S1A-001 A northern i… 1990… male 34-41 765 ## 2 2 &lt;S1A-001$B&gt; S1A-001 B northern i… 1990… fema… 34-41 1298 ## 3 3 &lt;S1A-002$?&gt; S1A-002 ? NA NA NA NA 23 ## 4 4 &lt;S1A-002$A&gt; S1A-002 A northern i… 2002… fema… 26-33 391 ## 5 5 &lt;S1A-002$B&gt; S1A-002 B northern i… 2002… fema… 19-25 47 ## 6 6 &lt;S1A-002$C&gt; S1A-002 C northern i… 2002… male 50+ 200 ## # … with 1 more variable: AgeGroup &lt;chr&gt; ## ## NA old young ## 547 333 452 ` Summarizing data Summarizing is really helpful and can be done using the summarise function. icebio_summary1 &lt;- icebio_texttype %&gt;% dplyr::summarise(Words = sum(Word.count)) # inspect data head(icebio_summary1) ## # A tibble: 1 × 1 ## Words ## &lt;dbl&gt; ## 1 141876 To get summaries of sub-groups or by variable level, we can use the group_by function and then use the summarise function. icebio_summary2 &lt;- icebio_texttype %&gt;% dplyr::group_by(Texttype, Sex) %&gt;% dplyr::summarise(Speakers = n(), Words = sum(Word.count)) # inspect data head(icebio_summary2) ## # A tibble: 6 × 4 ## # Groups: Texttype [3] ## Texttype Sex Speakers Words ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 PrivateDialoge female 105 60024 ## 2 PrivateDialoge male 18 9628 ## 3 PublicDialogue female 63 24647 ## 4 PublicDialogue male 41 16783 ## 5 UnscriptedMonologue female 3 6712 ## 6 UnscriptedMonologue male 16 24082 EXERCISE TIME! ` Use the icebio and determine the number of words uttered by female speakers from Northern Ireland above an age of 50. Answer words_fni50 &lt;- icebio %&gt;% dplyr::select(zone, sex, age, word.count) %&gt;% dplyr::group_by(zone, sex, age) %&gt;% dplyr::summarize(Words = sum(word.count)) %&gt;% dplyr::filter(sex == &quot;female&quot;, age == &quot;50+&quot;, zone == &quot;northern ireland&quot;) ## `summarise()` has grouped output by &#39;zone&#39;, &#39;sex&#39;. You can override using the ## `.groups` argument. # inspect data words_fni50 ## # A tibble: 1 × 4 ## # Groups: zone, sex [1] ## zone sex age Words ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 northern ireland female 50+ 23210 Load the file exercisedata.txt and determine the mean scores of groups A and B. Tip: to extract the mean, combine the summary function with the mean function. Answer exercisedata &lt;- read.delim(&quot;data/exercisedata.txt&quot;, sep = &quot;\\t&quot;, header = T) %&gt;% dplyr::group_by(Group) %&gt;% dplyr::summarize(Mean = mean(Score)) # inspect data exercisedata ## # A tibble: 2 × 2 ## Group Mean ## &lt;chr&gt; &lt;dbl&gt; ## 1 A 14.9 ## 2 B 11.8 ` Gathering and spreading data The tidyr package has two very useful functions for gathering and spreading data that can be sued to transform data to long and wide formats (you will see what this means below). The functions are called gather and spread. We will use the data set called icebio_summary2, which we created above, to demonstrate how this works. We will first check out the spread-function to create different columns for women and men that show how many of them are represented in the different text types. icebio_summary_wide &lt;- icebio_summary2 %&gt;% dplyr::select(-Words) %&gt;% tidyr::spread(Sex, Speakers) # inspect icebio_summary_wide ## # A tibble: 3 × 3 ## # Groups: Texttype [3] ## Texttype female male ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 PrivateDialoge 105 18 ## 2 PublicDialogue 63 41 ## 3 UnscriptedMonologue 3 16 The data is now in what is called a wide-format as values are distributed across columns. To reformat this back to a long-format where each column represents exactly one variable, we use the gather-function: icebio_summary_long &lt;- icebio_summary_wide %&gt;% tidyr::gather(Sex, Speakers, female:male) # inspect icebio_summary_long ## # A tibble: 6 × 3 ## # Groups: Texttype [3] ## Texttype Sex Speakers ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 PrivateDialoge female 105 ## 2 PublicDialogue female 63 ## 3 UnscriptedMonologue female 3 ## 4 PrivateDialoge male 18 ## 5 PublicDialogue male 41 ## 6 UnscriptedMonologue male 16 Ending R sessions At the end of each session, you can extract information about the session itself (e.g. which R version you used and which versions of packages). This can help others (or even your future self) to reproduce the analysis that you have done. Extracting session information You can extract the session information by running the sessionInfo function (without any arguments) sessionInfo() ## R version 4.2.0 (2022-04-22 ucrt) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 19043) ## ## Matrix products: default ## ## locale: ## [1] LC_COLLATE=German_Germany.utf8 LC_CTYPE=German_Germany.utf8 ## [3] LC_MONETARY=German_Germany.utf8 LC_NUMERIC=C ## [5] LC_TIME=German_Germany.utf8 ## ## attached base packages: ## [1] stats graphics grDevices datasets utils methods base ## ## other attached packages: ## [1] flextable_0.7.0 here_1.0.1 tokenizers_0.2.1 tm_0.7-8 ## [5] NLP_0.2-1 readxl_1.4.0 quanteda_3.2.1 tidytext_0.3.2 ## [9] forcats_0.5.1 stringr_1.4.0 dplyr_1.0.9 purrr_0.3.4 ## [13] readr_2.1.2 tidyr_1.2.0 tibble_3.1.7 ggplot2_3.3.6 ## [17] tidyverse_1.3.1 ## ## loaded via a namespace (and not attached): ## [1] fs_1.5.2 lubridate_1.8.0 httr_1.4.3 rprojroot_2.0.3 ## [5] SnowballC_0.7.0 tools_4.2.0 backports_1.4.1 bslib_0.3.1 ## [9] utf8_1.2.2 R6_2.5.1 DBI_1.1.2 colorspace_2.0-3 ## [13] withr_2.5.0 tidyselect_1.1.2 compiler_4.2.0 cli_3.3.0 ## [17] rvest_1.0.2 xml2_1.3.3 officer_0.4.2 bookdown_0.26 ## [21] slam_0.1-50 sass_0.4.1 scales_1.2.0 systemfonts_1.0.4 ## [25] digest_0.6.29 rmarkdown_2.14 base64enc_0.1-3 pkgconfig_2.0.3 ## [29] htmltools_0.5.2 dbplyr_2.1.1 fastmap_1.1.0 highr_0.9 ## [33] rlang_1.0.2 rstudioapi_0.13 jquerylib_0.1.4 generics_0.1.2 ## [37] jsonlite_1.8.0 zip_2.2.0 magrittr_2.0.3 Matrix_1.4-1 ## [41] Rcpp_1.0.8.3 munsell_0.5.0 fansi_1.0.3 gdtools_0.2.4 ## [45] lifecycle_1.0.1 stringi_1.7.6 yaml_2.3.5 grid_4.2.0 ## [49] parallel_4.2.0 crayon_1.5.1 lattice_0.20-45 haven_2.5.0 ## [53] hms_1.1.1 klippy_0.0.0.9500 knitr_1.39 pillar_1.7.0 ## [57] uuid_1.1-0 stopwords_2.3 fastmatch_1.1-3 reprex_2.0.1 ## [61] glue_1.6.2 evaluate_0.15 data.table_1.14.2 renv_0.15.4 ## [65] RcppParallel_5.1.5 modelr_0.1.8 vctrs_0.4.1 tzdb_0.3.0 ## [69] cellranger_1.1.0 gtable_0.3.0 assertthat_0.2.1 xfun_0.30 ## [73] broom_0.8.0 janeaustenr_0.1.5 ellipsis_0.3.2 Going further If you want to know more, would like to get some more practice, or would like to have another approach to R, please check out the workshops and resources on R provided by the UQ library. In addition, there are various online resources available to learn R (you can check out a very recommendable introduction here). Here are also some additional resources that you may find helpful: Grolemund. G., and Wickham, H., R 4 Data Science, 2017. Highly recommended! (especially chapters 1, 2, 4, 6, and 8) Stat545 - Data wrangling, exploration, and analysis with R. University of British Columbia. http://stat545.com/ Swirlstats, a package that teaches you R and statistics within R: https://swirlstats.com/ DataCamp’s (free) Intro to R interactive tutorial: https://www.datacamp.com/courses/free-introduction-to-r DataCamp’s advanced R tutorials require a subscription. *Twitter: Explore RStudio Tips https://twitter.com/rstudiotips Explore #rstats, #rstudioconf Citation &amp; Session Info Schweinberger, Martin. 2022. Getting started with R - for (absolute) beginners. Brisbane: The University of Queensland. url: https://slcladal.github.io/intror.html (Version 2022.05.08). @manual{schweinberger2022intror, author = {Schweinberger, Martin}, title = {Getting started with R - for (absolute) beginners}, note = {https://slcladal.github.io/intror.html}, year = {2022}, organization = &quot;The University of Queensland, School of Languages and Cultures}, address = {Brisbane}, edition = {2022.05.08} } sessionInfo() ## R version 4.2.0 (2022-04-22 ucrt) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 19043) ## ## Matrix products: default ## ## locale: ## [1] LC_COLLATE=German_Germany.utf8 LC_CTYPE=German_Germany.utf8 ## [3] LC_MONETARY=German_Germany.utf8 LC_NUMERIC=C ## [5] LC_TIME=German_Germany.utf8 ## ## attached base packages: ## [1] stats graphics grDevices datasets utils methods base ## ## other attached packages: ## [1] flextable_0.7.0 here_1.0.1 tokenizers_0.2.1 tm_0.7-8 ## [5] NLP_0.2-1 readxl_1.4.0 quanteda_3.2.1 tidytext_0.3.2 ## [9] forcats_0.5.1 stringr_1.4.0 dplyr_1.0.9 purrr_0.3.4 ## [13] readr_2.1.2 tidyr_1.2.0 tibble_3.1.7 ggplot2_3.3.6 ## [17] tidyverse_1.3.1 ## ## loaded via a namespace (and not attached): ## [1] fs_1.5.2 lubridate_1.8.0 httr_1.4.3 rprojroot_2.0.3 ## [5] SnowballC_0.7.0 tools_4.2.0 backports_1.4.1 bslib_0.3.1 ## [9] utf8_1.2.2 R6_2.5.1 DBI_1.1.2 colorspace_2.0-3 ## [13] withr_2.5.0 tidyselect_1.1.2 compiler_4.2.0 cli_3.3.0 ## [17] rvest_1.0.2 xml2_1.3.3 officer_0.4.2 bookdown_0.26 ## [21] slam_0.1-50 sass_0.4.1 scales_1.2.0 systemfonts_1.0.4 ## [25] digest_0.6.29 rmarkdown_2.14 base64enc_0.1-3 pkgconfig_2.0.3 ## [29] htmltools_0.5.2 dbplyr_2.1.1 fastmap_1.1.0 highr_0.9 ## [33] rlang_1.0.2 rstudioapi_0.13 jquerylib_0.1.4 generics_0.1.2 ## [37] jsonlite_1.8.0 zip_2.2.0 magrittr_2.0.3 Matrix_1.4-1 ## [41] Rcpp_1.0.8.3 munsell_0.5.0 fansi_1.0.3 gdtools_0.2.4 ## [45] lifecycle_1.0.1 stringi_1.7.6 yaml_2.3.5 grid_4.2.0 ## [49] parallel_4.2.0 crayon_1.5.1 lattice_0.20-45 haven_2.5.0 ## [53] hms_1.1.1 klippy_0.0.0.9500 knitr_1.39 pillar_1.7.0 ## [57] uuid_1.1-0 stopwords_2.3 fastmatch_1.1-3 reprex_2.0.1 ## [61] glue_1.6.2 evaluate_0.15 data.table_1.14.2 renv_0.15.4 ## [65] RcppParallel_5.1.5 modelr_0.1.8 vctrs_0.4.1 tzdb_0.3.0 ## [69] cellranger_1.1.0 gtable_0.3.0 assertthat_0.2.1 xfun_0.30 ## [73] broom_0.8.0 janeaustenr_0.1.5 ellipsis_0.3.2 Back to top "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
